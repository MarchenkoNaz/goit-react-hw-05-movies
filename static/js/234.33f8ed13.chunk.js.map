{"version":3,"file":"static/js/234.33f8ed13.chunk.js","mappings":"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","sources":["Helpers/getImages.js","Helpers/requestToApi.js","components/CastCard/CastCard.jsx","Pages/Cast.jsx"],"sourcesContent":["export const getImagesFromApi = (posterPath) => {\n\treturn `https://www.themoviedb.org/t/p/w220_and_h330_face${posterPath}`\n}","import axios from 'axios';\nimport { toast } from 'react-toastify';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst API_KEY = 'e0723ed903f05e10ff2c0d0ee3dce9dc';\n\nconst defaultParams = {\n\tapi_key: API_KEY,\n};\n\nexport const getTrending = async () => {\n\ttry {\n\t\tconst res = await axios.get('/trending/movie/day', { params: defaultParams });\n\t\treturn res.data;\n\t} catch (err) {\n\t\treturn toast.error(err.message)\n\t}\n};\n\nexport const getMovieDetails = async (id) => {\n\ttry {\n\t\tconst res = await axios.get(`/movie/${id}`, { params: defaultParams });\n\n\t\treturn res.data;\n\t} catch (err) {\n\t\treturn toast.error(err.message)\n\t}\n};\n\nexport const getMovieCredits = async (id) => {\n\ttry {\n\t\tconst res = await axios.get(`/movie/${id}/credits`, { params: defaultParams });\n\n\t\treturn res.data;\n\t} catch (err) {\n\t\treturn toast.error(err.message)\n\t}\n}\nexport const getMovieReviews = async (id) => {\n\ttry {\n\t\tconst res = await axios.get(`/movie/${id}/reviews`, { params: defaultParams });\n\n\t\treturn res.data;\n\t} catch (err) {\n\t\treturn toast.error(err.message)\n\t}\n}\nexport const getMoviesBySearch = async (name = '', page = 1) => {\n\ttry {\n\t\tconst res = await axios.get(`/search/movie?query=${name}&page=${page}`, { params: defaultParams });\n\n\t\treturn res.data;\n\t} catch (err) {\n\t\treturn toast.error(err.message)\n\t}\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport defaultAvatar from 'images/default.png';\nimport { getImagesFromApi } from 'Helpers/getImages';\n\nconst CastCard = ({ name, character, avatar }) => {\n\treturn (\n\t\t<div>\n\t\t\t<img\n\t\t\t\tsrc={avatar ? getImagesFromApi(avatar) : defaultAvatar}\n\t\t\t\tstyle={{ width: 220, height: 330 }}\n\t\t\t\talt={name}\n\t\t\t/>\n\t\t\t<h3>{name}</h3>\n\t\t\t<p>Character: {character || 'Not found'}</p>\n\t\t</div>\n\t);\n};\n\nCastCard.propTypes = {\n\tname: PropTypes.string.isRequired,\n\tcharacter: PropTypes.string,\n\tavatar: PropTypes.string,\n};\n\nexport default CastCard;\n","import { LinearProgress } from '@mui/material';\nimport { getMovieCredits } from 'Helpers/requestToApi';\nimport CastCard from 'components/CastCard/CastCard';\nimport React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nconst Cast = () => {\n\tconst [cast, setCast] = useState([]);\n\tconst [error, setError] = useState(null);\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\tconst { id } = useParams();\n\n\tuseEffect(() => {\n\t\tconst fetchCast = async () => {\n\t\t\ttry {\n\t\t\t\tsetIsLoading(true)\n\t\t\t\tconst { cast } = await getMovieCredits(id);\n\t\t\t\tconst newCast = cast.map(({ id, name, character, profile_path }) => ({\n\t\t\t\t\tid,\n\t\t\t\t\tname,\n\t\t\t\t\tcharacter,\n\t\t\t\t\tprofile_path,\n\t\t\t\t}));\n\n\t\t\t\tsetCast(newCast);\n\t\t\t} catch (err) {\n\t\t\t\tsetError(err);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tsetIsLoading(false)\n\t\t\t}\n\t\t};\n\n\t\tfetchCast();\n\t}, [id]);\n\treturn (<>\n\t\t{error && toast.error(error)}\n\t\t{isLoading ? <LinearProgress /> : <ul className='list-group d-flex flex-wrap flex-row justify-content-md-around '>\n\t\t\t{cast.length !== 0 ? cast.map(({ id, name, character, profile_path }) => (\n\t\t\t\t<li key={id}>\n\t\t\t\t\t<CastCard\n\t\t\t\t\t\tname={name}\n\t\t\t\t\t\tcharacter={character}\n\t\t\t\t\t\tavatar={profile_path}\n\t\t\t\t\t/>\n\t\t\t\t</li>\n\t\t\t)) : <p className='display-6'>No cast members</p>}\n\t\t</ul>}\n\n\t</>)\n}\n\nexport default Cast"],"names":["getImagesFromApi","posterPath","axios","defaultParams","api_key","getTrending","params","res","data","toast","message","getMovieDetails","id","getMovieCredits","getMovieReviews","getMoviesBySearch","name","page","character","avatar","src","defaultAvatar","style","width","height","alt","useState","cast","setCast","error","setError","isLoading","setIsLoading","useParams","useEffect","fetchCast","newCast","map","profile_path","LinearProgress","className","length"],"sourceRoot":""}